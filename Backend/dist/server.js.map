{
  "version": 3,
  "sources": ["../models/User.js", "../models/Task.js", "../models/Project.js", "../models/Staff.js", "../models/Department.js", "../models/Employee.js", "../email.js", "../server.js"],
  "sourcesContent": ["const mongoose = require('mongoose');\r\nconst bcrypt = require('bcryptjs'); // For password hashing\r\n\r\nconst userSchema = new mongoose.Schema({\r\n    name: {\r\n        type: String,\r\n        required: true,\r\n        trim: true\r\n    },\r\n    email: {\r\n        type: String,\r\n        required: true,\r\n        unique: true,\r\n        trim: true,\r\n        lowercase: true,\r\n        match: [/^\\w+([\\.-]?\\w+)?@\\w+([\\.-]?\\w+)?(\\.\\w{2,3})+$/, 'Please fill a valid email address']\r\n    },\r\n    password: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    role: {\r\n        type: String,\r\n        enum: ['admin', 'user'],\r\n        default: 'user'\r\n    },\r\n    employeeId: { \r\n        type: mongoose.Schema.Types.ObjectId, \r\n        ref: 'Employee' // Link user to an employee\r\n    }\r\n});\r\n\r\n// Hash password before saving\r\nuserSchema.pre('save', async function(next) {\r\n    if (this.isModified('password')) {\r\n        this.password = await bcrypt.hash(this.password, 10);\r\n    }\r\n    next();\r\n});\r\n\r\n// Method to compare password\r\nuserSchema.methods.comparePassword = async function(candidatePassword) {\r\n    return await bcrypt.compare(candidatePassword, this.password);\r\n};\r\n\r\nconst User = mongoose.model('User', userSchema);\r\nmodule.exports = User;\r\n", "// models/Task.js\r\nconst mongoose = require(\"mongoose\");\r\nconst { v4: uuidv4 } = require(\"uuid\");\r\n\r\nconst TaskSchema = new mongoose.Schema(\r\n  {\r\n    name: { type: String, required: true },\r\n    description: { type: String },\r\n    project_key: { type: mongoose.Schema.Types.ObjectId, ref: \"Project\" },\r\n    assigned_to: { type: mongoose.Schema.Types.ObjectId, ref: \"Employee\" },\r\n    contact_person: { type: mongoose.Schema.Types.ObjectId, ref: \"Employee\" },\r\n\r\n // Link to Ticket\r\n    ticketId: { type: String, default: null }, // New field for ticket reference\r\n\r\n    start_date: { type: Date },\r\n    end_date: { type: Date },\r\n      procedure: { type: String },  \r\n      comments: { type: String },   \r\n  qa_status: { type: String },      \r\n  uat_status: { type: String },\r\n\r\n    priority: { type: String, default: \"Medium\" },\r\n    status: { type: String, default: \"IDEA\" },\r\n    orderIndex: { type: Number, default: 0 },\r\n\r\n    request_type: {\r\n      type: String,\r\n      enum: [\"New Request\", \"Existing Request\"],\r\n      default: \"New Request\",\r\n    },\r\n    resolution_type: {\r\n      type: String,\r\n      enum: [\"Functional\", \"Technical\"],\r\n      default: \"Functional\",\r\n    },\r\n\r\n    category: {\r\n      type: String,\r\n      enum: [\"Task\", \"Subtask\"], \r\n      default: \"Task\",\r\n    },\r\n\r\n    done: { type: Boolean, default: false },\r\n    task_key: { type: String, unique: true, default: uuidv4 },\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nmodule.exports = mongoose.model(\"Task\", TaskSchema);\r\n", "const mongoose = require('mongoose');\r\n\r\nconst projectSchema = new mongoose.Schema({\r\n  name: { type: String, required: true, trim: true, unique: true },\r\n  description: { type: String, required: true, trim: true },\r\n  contact_person: { type: mongoose.Schema.Types.ObjectId, ref: 'Employee', required: false },\r\n    assigned_to: { type: mongoose.Schema.Types.ObjectId, ref: \"Employee\" }\r\n}, { timestamps: true });\r\n\r\nmodule.exports = mongoose.model('Project', projectSchema);\r\n", "const mongoose = require('mongoose');\r\n\r\nconst staffSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: true,\r\n    trim: true\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true,\r\n    lowercase: true,\r\n    trim: true\r\n  },\r\n  \r\n  department: {\r\n    type: String,\r\n    trim: true\r\n  },\r\n \r\n});\r\n\r\nmodule.exports = mongoose.model('Staff', staffSchema);\r\n", "const mongoose = require('mongoose');\r\n\r\nconst departmentSchema = new mongoose.Schema({\r\n  name: { type: String, required: true, unique: true }\r\n});\r\n\r\nmodule.exports = mongoose.model('Department', departmentSchema);\r\n", "const mongoose = require(\"mongoose\");\r\n\r\nconst EmployeeSchema = new mongoose.Schema({\r\n  name: { type: String, required: true },\r\n  email: { type: String, required: true },\r\n  telephone_no: { type: String, required: true },\r\n  departmentId: { type: mongoose.Schema.Types.ObjectId, ref: 'Department' },\r\n  department: { type: String, required: true },\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Employee\", EmployeeSchema);\r\n", "require('dotenv').config();\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  host: process.env.EMAIL_HOST,\n  port: process.env.EMAIL_PORT,\n  secure: false,\n  auth: {\n    user: process.env.EMAIL_USER,\n    pass: process.env.EMAIL_PASS\n  }\n});\n\nconst sendTaskEmail = (assignedEmail, taskDetails) => {\n  let emailSubject, emailMessage;\n  const action = taskDetails.action;   // \u2705 passed from routes\n\n  // ------------------- NEW TASK -------------------\n  if (action === 'assigned') {\n    emailSubject = `New Task Assigned: ${taskDetails.taskName || \"Untitled Task\"}`;\n    emailMessage = `\n      <h3>You have been assigned a new task</h3>\n      <p><strong>Task:</strong> ${taskDetails.taskName || \"N/A\"}</p>\n      <p><strong>Contact Person:</strong> ${taskDetails.contactPerson || \"N/A\"}</p>\n      <p>Please log in to the system to view more details regarding the task.</p>\n      <p>Best regards,<br>Project Management Team</p>\n    `;\n  }\n\n  // ------------------- BULK UPLOAD -------------------\n  else if (action === 'upload') {\n    // Ensure taskDetails.tasks is an array\n    const tasksArray = Array.isArray(taskDetails.tasks) ? taskDetails.tasks : [];\n\n    const taskList = tasksArray\n      .map(task => `<li><strong>${task.name}</strong> (Project: ${task.project || \"N/A\"})</li>`)\n      .join('');\n\n    emailSubject = `New Tasks Uploaded`;\n    emailMessage = `\n      <h3>New Tasks Have Been Uploaded</h3>\n      <p>You have been assigned new tasks. Please see the list below:</p>\n      <ul>${taskList || \"<li>No tasks found</li>\"}</ul>\n      <p>Please check the task management system for full details.</p>\n      <p>Best regards,<br>Project Management Team</p>\n    `;\n  }\n\n  // ------------------- TASK UPDATED -------------------\n  else if (action === 'updated') {\n    emailSubject = `Task Updated: ${taskDetails.updated?.name || \"N/A\"}`;\n    emailMessage = `\n      <h3>The task \"${taskDetails.updated?.name || \"N/A\"}\" has been updated</h3>\n      <p><strong>Previous Details:</strong><br>\n         Name: ${taskDetails.previous?.name || \"N/A\"}<br>\n         Contact Person: ${taskDetails.previous?.contactPerson || \"N/A\"}</p>\n      <p><strong>Updated Details:</strong><br>\n         Name: ${taskDetails.updated?.name || \"N/A\"}<br>\n         Contact Person: ${taskDetails.updated?.contactPerson || \"N/A\"}</p>\n      <p>Please check the task management system for more details.</p>\n      <p>Best regards,<br>Project Management Team</p>\n    `;\n  }\n\n  // ------------------- DEFAULT -------------------\n  else {\n    emailSubject = \"Task Notification\";\n    emailMessage = `\n      <p>Hello,</p>\n      <p>You have a task notification. Please check the system for details.</p>\n      <p>Best regards,<br>Project Management Team</p>\n    `;\n  }\n\n  const mailOptions = {\n    from: process.env.EMAIL_USER,\n    to: assignedEmail,\n    subject: emailSubject,\n    html: emailMessage\n  };\n\n  transporter.sendMail(mailOptions, (error, info) => {\n    if (error) {\n      console.error('\u274C Error sending email:', error);\n    } else {\n      console.log('\u2705 Email sent:', info.response);\n    }\n  });\n};\n\nmodule.exports = sendTaskEmail;\n", "require('dotenv').config();\n\nconst multer = require(\"multer\");\nconst express = require(\"express\");\n//const app = express();\n//app.use(express.json()); // \u2705 This enables parsing of JSON bodies\n//app.use(express.urlencoded({ extended: true })); // <- for form-data\nconst mysql = require('mysql2');\nconst cors = require('cors');\n// middleware\n//app.use(cors());\n//app.use(express.json()); \n//app.use(express.urlencoded({ extended: true }));\n\n\nconst router = express.Router();\nconst bodyParser = require('body-parser');\nconst moment = require('moment');\nconst nodemailer = require('nodemailer');\nconst bcrypt = require('bcryptjs');\nconst XLSX = require('xlsx');\nconst upload = multer({ storage: multer.memoryStorage() });\nconst mongoose = require('mongoose');\nconst User = require('./models/User');\nconst Task = require('./models/Task');\n\n\n\n\nconst Project = require('./models/Project');\nconst Staff = require('./models/Staff');\nconst Department = require('./models/Department');\nconst Employee = require('./models/Employee');\n// At the top of your server.js or routes/task.js\nconst { v4: uuidv4 } = require('uuid');\n\n\n\n\n/*const db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'ticket' // Change this to your actual DB name\n});*/\nconst jwt = require('jsonwebtoken');\n\n\n\nconst sendTaskEmail = require('./email');\n\nconst app = express();\nconst port = process.env.PORT || 8083;\nconst secretKey = process.env.SECRET_KEY;\n\n// Middleware\napp.use(cors());\n//app.use(express.json());\n\n\n//app.use(bodyParser.json());\n// Allow larger payloads (JSON / URL-encoded)\napp.use(bodyParser.json({ limit: \"250mb\" }));\napp.use(bodyParser.urlencoded({ limit: \"250mb\", extended: true }));\n\n\n// Get MongoDB connection URI from environment variables\n//const dbURI = process.env.MONGODB_URI; \nconst dbURI = \"mongodb://localhost:27017/ticket\"\n// Check if MONGODB_URI is defined\nif (!dbURI) {\n    console.error('Error: MONGODB_URI is not defined in your .env file.');\n    // Exit the process or handle the error appropriately\n    process.exit(1); \n}\n\n\nmongoose.connect(dbURI)\n    .then(() => {\n        console.log('MongoDB connected successfully');\n    })\n    .catch((err) => {\n        console.error('Error connecting to MongoDB:', err.message);\n    });\n\n// Optional: Handle Mongoose connection events\nmongoose.connection.on('disconnected', () => {\n    console.log('MongoDB disconnected!');\n});\n\nmongoose.connection.on('error', (err) => {\n    console.error('MongoDB connection error:', err);\n});\n\n// const app = mysql.createapp({\n//   connectionLimit: 4,\n//   host: process.env.DB_HOST,\n//   user: process.env.DB_USER,\n//   password: process.env.DB_PASSWORD,\n//   database: process.env.MONGODB_URI,\n//   waitForConnections: true,\n//   queueLimit: 0,\n// });\n\n// app.getConnection((err, connection) => {\n//   if (err) {\n//     console.error('Error connecting to the database:', err.message);\n//     console.log(err)\n//     return;\n//   }\n//   console.log('Database connected successfully');\n//   connection.release();\n// });\n\n/* ===========================\n        REGISTER ROUTES\n   =========================== */\n\n//Register users \napp.post('/register', async (req, res) => {\n  try {\n    const { name, email, password,role} = req.body;\n    console.log('Raw req.body:', req.body);\n\n    console.log(name, email, password);\n\n    if (!name || !email || !password) {\n      return res.status(400).json({ success: false, message: 'All fields are required.' });\n    }\n\n    const existingUser = await User.findOne({ email });\n    if (existingUser) {\n      return res.status(400).json({ success: false, message: 'This email is already registered.' });\n    }    \n\n    const newUser = new User({ name, email, password,role });\n    await newUser.save();\n   \n    res.status(201).json({ success: true, message: 'User registered successfully.' });\n  } catch (error) {\n    console.error('Error registering user:', error);\n    res.status(500).json({ success: false, message: 'Server error. Please try again.' });\n  }\n});\n\napp.get('/register', (req, res) => {\n  app.post('SELECT * FROM registration', (err, results) => {\n    if (err) {\n\n      return res.status(400).json({ message: 'Internal server error', error: err });\n    }\n    res.json({ success: true, users: results });\n  });\n});\napp.post('/register/check-email', (req, res) => {\n  const { email } = req.body;\n  if (!email) {\n    return res.status(400).json({ error: 'Email is required' });\n  }\n  app.post('SELECT * FROM registration WHERE email = ?', [email], (err, results) => {\n    if (err) {\n      return res.status(400).json({ message: 'Internal server error', error: err });\n    }\n    if (results.length > 0) {\n      return res.json({ exists: true });\n    }\n    return res.json({ exists: false });\n  });\n});\n\n\n\n\n//FLUTTER APIS\n//Fetch employees\napp.get('/register', (req, res) => {\n  app.post('SELECT * FROM registration', (err, results) => {\n    if (err) {\n\n      return res.status(400).json({ message: 'Internal server error', error: err });\n    }\n    res.json({ success: true, users: results });\n  });\n});\n\n//Register employee\napp.post('/register', async (req, res) => {\n  const { name, email, password } = req.body;\n\n  // Input validation\n  if (!name || !email || !password) {\n    return res.status(400).json({ success: false, message: 'All fields are required.' });\n  }\n\n  const sql = \"INSERT INTO registration(name, email, password) VALUES(?)\";\n\n  try {\n    // Hash the password with bcrypt\n    const saltRounds = 10;\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n\n    const values = [name, email, hashedPassword];\n\n    // Execute the SQL query\n    app.post(sql, [values], (err, data) => {\n      if (err) {\n        console.error('Database error:', err); // Log the error for debugging\n        return res.status(500).json({ success: false, message: 'Database error. Please try again.' });\n      }\n\n      // Send success response\n      return res.status(201).json({ success: true, message: 'User registered successfully.', data });\n    });\n  } catch (err) {\n    console.error('Server error:', err); // Log the error for debugging\n    return res.status(500).json({ success: false, message: 'Server error. Please try again.' });\n  }\n});\n\n//Change password\napp.post('/registration/password-change', async (req, res) => {\n  const token = req.headers.authorization?.split(' ')[1]; // Extract JWT from Bearer token\n  if (!token) {\n    return res.status(401).json({ success: false, error: 'Unauthorized access. Please log in again.' });\n  }\n\n  try {\n    const decoded = jwt.verify(token, secretKey); // Verify JWT\n    const userEmail = decoded.email; // Extract user email from the payload\n\n    const { currentPassword, newPassword } = req.body;\n\n    // Validation checks\n    if (!currentPassword || !newPassword) {\n      return res.status(400).json({\n        success: false,\n        error: 'Both current password and new password are required.',\n      });\n    }\n\n    // Fetch user and verify the current password\n    const [userRows] = await app.promise().query(\n      'SELECT password FROM registration WHERE email = ?',\n      [userEmail]\n    );\n\n    if (userRows.length === 0) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid current password or user does not exist.',\n      });\n    }\n\n    const isMatch = await bcrypt.compare(currentPassword, userRows[0].password);\n    if (!isMatch) {\n      return res.status(400).json({\n        success: false,\n        error: 'Invalid current password.',\n      });\n    }\n\n    if (currentPassword === newPassword) {\n      return res.status(400).json({\n        success: false,\n        error: 'New password cannot be the same as the current password.',\n      });\n    }\n\n    // Hash the new password and update the database\n    const salt = await bcrypt.genSalt(10);\n    const hashedPassword = await bcrypt.hash(newPassword, salt);\n\n    await app.promise().query(\n      'UPDATE registration SET password = ? WHERE email = ?',\n      [hashedPassword, userEmail]\n    );\n\n    res.status(200).json({\n      success: true,\n      message: 'Password changed successfully.',\n    });\n  } catch (error) {\n    console.error('Error:', error);\n    res.status(500).json({\n      success: false,\n      error: 'An error occurred. Please try again later.',\n    });\n  }\n});\n\n\n/* ===========================\n       LOGIN ROUTES\n =========================== */\n\napp.post('/login', async (req, res) => {\n  try {\n    const { email, password } = req.body;\n    if (!email || !password) {\n      return res.status(400).json({ message: 'Email and password are required' });\n    }\n      const user = await User.findOne({ email });\n\n       if (!user) {\n        return res.status(401).json({ message: 'Invalid credentials' });\n\n       }\n        const validPassword = await user.comparePassword(password);\n        if (!validPassword) {\n          return res.status(401).json({ message: 'Invalid credentials' });\n        }\n        // Generate a token\n        const token = jwt.sign({ id: user._id, email: user.email, name: user.name,  role: user.role }, secretKey, { expiresIn: '120m' });  \n        return res.status(200).json({ message: 'Login successful', email: user.email, name: user.name, role: user.role, authToken: token });\n      \n  } catch (error) {\n    console.error('Error during login:', error);\n    res.status(500).json({ message: 'An error occurred. Please try again later.'});\n  }\n});\n\n// \u2705 Middleware to verify JWT\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers[\"authorization\"];\n  const token = authHeader && authHeader.split(\" \")[1];\n\n  if (!token) return res.status(401).json({ success: false, message: \"No token provided\" });\n\n  jwt.verify(token, secretKey, (err, user) => {\n    if (err) return res.status(403).json({ success: false, message: \"Invalid token\" });\n    req.user = user; // { id, email, name, role }\n    next();\n  });\n}\n\n\n// \u2705 Change Password Route\napp.post(\"/user/change-password\", authenticateToken, async (req, res) => {\n  try {\n    const { currentPassword, newPassword } = req.body;\n    const userId = req.user.id;\n\n    const user = await User.findById(userId);\n    if (!user) {\n      return res.status(404).json({ success: false, message: \"User not found\" });\n    }\n\n    // check current password\n    const isMatch = await bcrypt.compare(currentPassword, user.password);\n    if (!isMatch) {\n      return res.status(400).json({ success: false, message: \"Current password is incorrect\" });\n    }\n\n    // update password\n    user.password = newPassword; // pre('save') will hash\n    await user.save();\n\n    // generate new token\n    const token = jwt.sign(\n      { id: user._id, email: user.email, name: user.name, role: user.role },\n      secretKey,\n      { expiresIn: \"30m\" }\n    );\n\n    res.json({\n      success: true,\n      message: \"Password updated successfully\",\n      token,\n      user: { id: user._id, email: user.email, name: user.name, role: user.role }\n    });\n  } catch (error) {\n    console.error(\"Error changing password:\", error);\n    res.status(500).json({ success: false, message: \"Server error\" });\n  }\n});\n//FLUTTER ROUTES\n/*app.post('/log', async (req, res) => {\n  const { email, password } = req.body;\n\n  if (!email || !password) {\n    return res.status(400).send({ success: false, message: 'Email and password are required' });\n  }\n\n  const query = 'SELECT * FROM registration WHERE email = ?';\n  try {\n    app.post(query, [email], async (err, result) => {\n      if (err) {\n        console.error('Database error:', err); // Log error for debugging\n        return res.status(500).send({ success: false, message: 'Internal server error' });\n      }\n\n      if (result.length === 0) {\n        return res.status(401).send({ success: false, message: 'Invalid credentials' });\n      }\n\n      const user = result[0];\n      const isMatch = await bcrypt.compare(password, user.password);\n      if (!isMatch) {\n        return res.status(401).send({ success: false, message: 'Invalid credentials' });\n      }\n\n      // Generate a token\n      const token = jwt.sign({ id: user.id, email: user.email, role: user.role, name: user.name }, secretKey, { expiresIn: '1h' });\n\n      const sanitizedUser = { id: user.id, email: user.email, role: user.role, name: user.name };\n      console.log(user.role);\n      return res.status(200).send({\n        success: true,\n        message: 'Login successful',\n        token,\n        user: sanitizedUser,\n      });\n    });\n  } catch (error) {\n    console.error('Unexpected error during login:', error); // Log unexpected errors\n    res.status(500).send({ success: false, message: 'An error occurred. Please try again later.' });\n  }\n});*/\n\n\n\n\n\n\n\n/* ===========================\n       EMPLOYEE ROUTES\n   =========================== */\n\napp.post('/employee', async (req, res) => {\n  const { name, email, telephone_no, departmentId } = req.body;\n\n  if (!name || !email || !telephone_no || !departmentId) {\n    return res.status(400).json({ success: false, message: 'All fields are required' });\n  }\n\n  try {\n    const department = await Department.findById(departmentId);\n    if (!department) {\n      return res.status(400).json({ success: false, message: 'Invalid department' });\n    }\n\n    const employee = new Employee({\n      name,\n      email,\n      telephone_no,\n      departmentId,\n      department: department.name\n    });\n\n    await employee.save();\n    res.json({ success: true, message: 'Employee added successfully', employee });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, message: 'Failed to add employee', error: err.message });\n  }\n});\n\n// ===========================\n// UPDATE employee\n// ===========================\napp.put('/employee/update', async (req, res) => {\n  const { id, name, email, telephone_no, departmentId } = req.body;\n\n  if (!id || !name || !email || !telephone_no || !departmentId) {\n    return res.status(400).json({ success: false, message: 'All fields are required' });\n  }\n\n  try {\n    const department = await Department.findById(departmentId);\n    if (!department) {\n      return res.status(400).json({ success: false, message: 'Invalid department' });\n    }\n\n    const result = await Employee.updateOne(\n      { _id: id },\n      { $set: { name, email, telephone_no, departmentId, department: department.name } }\n    );\n\n    if (result.matchedCount === 0) {\n      return res.status(404).json({ success: false, message: 'Employee not found' });\n    }\n\n    res.json({ success: true, message: 'Employee updated successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, message: 'Error updating employee', error: err.message });\n  }\n});\n\n// ===========================\n// DELETE employee\n// ===========================\napp.delete('/employee/:id', async (req, res) => {\n  const { id } = req.params;\n\n  try {\n    const result = await Employee.deleteOne({ _id: id });\n    if (result.deletedCount === 0) {\n      return res.status(404).json({ success: false, message: 'Employee not found' });\n    }\n    res.json({ success: true, message: 'Employee deleted successfully' });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, message: 'Error deleting employee', error: err.message });\n  }\n});\n\n// ===========================\n// GET employee count\n// ===========================\napp.get('/employee/count', async (req, res) => {\n  try {\n    const count = await Employee.countDocuments();\n    res.json({ success: true, count });\n  } catch (err) {\n    console.error(err);\n    res.status(500).json({ success: false, message: 'Internal server error', error: err.message });\n  }\n});\n\n/* ===========================\n        TASK ROUTES\n   =========================== */\n\n/*app.get('/task', (req, res) => {\n  const page = parseInt(req.query.page) || 1;  // Get page number from query (default: 1)\n  const limit = parseInt(req.query.limit) || 20;  // Get limit from query (default: 20)\n  const offset = (page - 1) * limit;  // Calculate offset\n\n  // Query to get paginated tasks\n  const queryTasks = 'SELECT * FROM task LIMIT ? OFFSET ?';\n  // Query to count total tasks\n  const queryCount = 'SELECT COUNT(*) AS total FROM task';\n\n  app.post(queryTasks, [limit, offset], (err, results) => {\n    if (err) {\n      return res.status(500).json({ message: 'Internal server error', error: err });\n    }\n\n    // Get total number of tasks\n    app.post(queryCount, (err, countResult) => {\n      if (err) {\n        return res.status(500).json({ message: 'Error counting tasks', error: err });\n      }\n\n      const totalTasks = countResult[0].total;\n      const totalPages = Math.ceil(totalTasks / limit);\n\n      res.json({\n        success: true,\n        tasks: results,\n        totalPages,\n        currentPage: page,\n        totalTasks\n      });\n    });\n  });\n});\n\napp.post('/task', (req, res) => {\n  const { name, description, project_key, contact_person } = req.body;\n  if (!name || !description || !project_key || !contact_person) {\n    return res.status(400).json({ message: 'All fields are required' });\n  }\n\n  const sql = \"INSERT INTO task (name, description, project_key, contact_person) VALUES (?, ?, ?, ?)\";\n  app.post(sql, [name, description, project_key, contact_person], (err, result) => {\n    if (err) {\n      return res.status(400).json({ success: false, message: 'Failed to save task to the database', error: err });\n    }\n    return res.json({ success: true, message: 'Task saved successfully' });\n  });\n});*/\n// ------------------- GET TASKS -------------------\n\n// \u2705 Task routes\n\n// Get tasks with pagination & project filter\napp.get(\"/task\", async (req, res) => {\n  try {\n    const page = parseInt(req.query.page) || 1;\n    const limit = parseInt(req.query.limit) || 1000;\n    const skip = (page - 1) * limit;\n\n    const filter = {};\n\n    // Accept both projectId and project_key\n    if (req.query.projectId) {\n      filter.project_key = req.query.projectId;\n    } else if (req.query.project_key) {\n      filter.project_key = req.query.project_key;\n    }\n\n    // \u2705 Role-based filtering\n    // If not admin, only return tasks assigned to this user\n    if (req.user && req.user.role !== \"admin\") {\n      // If assigned_to in DB is stored as ObjectId (ref to User model)\n      try {\n        filter.assigned_to = new mongoose.Types.ObjectId(req.user._id);\n      } catch (e) {\n        return res.status(400).json({ success: false, message: \"Invalid user ID format\" });\n      }\n\n      // If assigned_to is stored as a username string (e.g. \"vin\", \"dan\")\n      // use this instead:\n      // filter.assigned_to = req.user.username;\n    }\n\n    const tasks = await Task.find(filter).skip(skip).limit(limit).lean();\n    const totalTasks = await Task.countDocuments(filter);\n    const totalPages = Math.ceil(totalTasks / limit);\n\n    res.json({\n      success: true,\n      tasks,\n      totalTasks,\n      totalPages,\n      currentPage: page,\n    });\n  } catch (error) {\n    console.error(\"Error fetching tasks:\", error);\n    res.status(500).json({\n      message: \"Internal server error\",\n      error: error.message,\n    });\n  }\n});\n\n// \u2705 Get task count only (lighter request)\napp.get(\"/task/count\", async (req, res) => {\n  try {\n    const filter = {};\n\n    if (req.query.projectId) {\n      filter.project_key = req.query.projectId;\n    } else if (req.query.project_key) {\n      filter.project_key = req.query.project_key;\n    }\n\n    // \u2705 Role-based filtering\n    if (req.user && req.user.role !== \"admin\") {\n      try {\n        filter.assigned_to = new mongoose.Types.ObjectId(req.user._id);\n      } catch {\n        return res.status(400).json({ success: false, message: \"Invalid user ID format\" });\n      }\n      // Or, if `assigned_to` is a username string:\n      // filter.assigned_to = req.user.username;\n    }\n\n    const count = await Task.countDocuments(filter);\n\n    res.json({ success: true, count });\n  } catch (error) {\n    console.error(\"Error fetching task count:\", error);\n    res.status(500).json({\n      message: \"Internal server error\",\n      error: error.message,\n    });\n  }\n});\n\n\n\n// ------------------- CREATE TASK -------------------\napp.post(\"/task\", async (req, res) => {\n  const {\n    name,\n    description,\n    projectId,\n    project_key,\n    assigned_to,\n    contact_person,\n    start_date,\n    end_date,\n    priority,\n    status,\n    request_type,\n    resolution_type,\n    ticket, // \u2705 NEW\n  } = req.body;\n\n  const project = projectId || project_key;\n  if (!name || !description || !project) {\n    return res.status(400).json({\n      success: false,\n      message: \"Name, description, and projectId are required\",\n    });\n  }\n\n  try {\n    const projectExists = await Project.findById(project);\n    if (!projectExists) {\n      return res.status(400).json({\n        success: false,\n        message: \"Selected project not found.\",\n      });\n    }\n\n    // Create task with consistent fields\n    const newTask = new Task({\n      name,\n      description,\n      project_key: project,\n      contact_person: contact_person || null,\n      assigned_to: assigned_to || null,\n      start_date: start_date ? new Date(start_date) : new Date(),\n      end_date: end_date ? new Date(end_date) : new Date(),\n      priority: priority || \"Medium\",\n      status: status || \"NOT STARTED\",\n      request_type: request_type || \"New Request\",\n      resolution_type: resolution_type || \"Functional\",\n      done: false,\n      task_key: uuidv4(),\n      ticket: ticket || null, // \u2705 NEW\n    });\n\n    const savedTask = await newTask.save();\n\n    //  Link task to ticket\n    if (ticket) {\n      await Ticket.findByIdAndUpdate(ticket, {\n        $addToSet: { tasks: savedTask._id },\n      });\n    }\n\n    //  Resolve contact person name for response\n    let contactName = \"N/A\";\n    if (contact_person) {\n      const employee = await Employee.findById(contact_person).lean();\n      if (employee) {\n        contactName = employee.name;\n\n        if (employee.email) {\n          sendTaskEmail(\n            employee.email,\n            {\n              taskName: name,\n              contact_person: employee.name,\n            },\n            \"assigned\"\n          );\n        }\n      }\n    }\n\n    res.status(201).json({\n      success: true,\n      task: {\n        ...savedTask.toObject(),\n        contact_person_name: contactName,\n      },\n    });\n  } catch (err) {\n    res.status(500).json({\n      success: false,\n      message: \"Failed to create task\",\n      error: err.message,\n    });\n  }\n});\n\n\n\n// ------------------- BULK UPLOAD -------------------\n\n// \u2705 Bulk Upload Route (Support Project, Ticket ID Reference)\napp.post(\"/tasks/bulk\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file || req.file.size === 0) {\n      return res.status(400).json({ message: \"Invalid file uploaded\" });\n    }\n\n    const workbook = XLSX.read(req.file.buffer, { type: \"buffer\" });\n    const sheet = workbook.Sheets[workbook.SheetNames[0]];\n    const jsonData = XLSX.utils.sheet_to_json(sheet, { defval: \"\", raw: false, range: 0, header: 1 });\n\n    if (jsonData.length < 2) {\n      return res.status(400).json({ message: \"Uploaded file is empty\" });\n    }\n\n    // --- Header mapping ---\n    const headerMap = {\n      \"MODULE NAME\": \"module_name\",\n      \"PROCESS NAME\": \"description\",\n      \"SUB MODULE\": \"name\",\n      \"PROCEDURE\": \"procedure\",\n      \"COMMENTS\": \"comments\",\n      \"OWNER\": \"contact_person\",\n      \"ASSIGNED DEV\": \"assigned_to\",\n      \"TESTER\": \"assigned_to\",\n      \"START DATE\": \"start_date\",\n      \"END DATE\": \"end_date\",\n      \"PRIORITY\": \"priority\",\n      \"QA STATUS\": \"qa_status\",\n      \"UAT STATUS\": \"uat_status\",\n      \"REQUEST TYPE\": \"request_type\",\n      \"RESOLUTION TYPE (FUNCTIONAL OR TECHNICAL)\": \"resolution_type\",\n      \"TICKET ID\": \"ticket_id\", // \u2705 Optional ticket reference\n    };\n\n    const cleanString = (val) => (!val ? \"\" : String(val).replace(/\\u00a0/g, \" \").trim());\n    const normalizeName = (val) => cleanString(val).toLowerCase();\n    const parseDate = (value) => {\n      if (!value) return null;\n      const d = new Date(value);\n      return isNaN(d.getTime()) ? null : d;\n    };\n    const safeEnum = (val, allowed, fallback) => {\n      val = cleanString(val);\n      return allowed.includes(val) ? val : fallback;\n    };\n    const normalizeKey = (key) => {\n      const k = key.toUpperCase().trim();\n      return headerMap[k] || k.toLowerCase().replace(/\\s+/g, \"_\");\n    };\n\n    // --- Extract headers + rows ---\n    const headers = jsonData[0].map((h) => normalizeKey(h));\n    const rows = jsonData.slice(1).map((row, idx) => {\n      const newRow = {};\n      headers.forEach((h, i) => (newRow[h] = row[i] || \"\"));\n      newRow.__rowNum__ = idx + 2;\n      return newRow;\n    });\n\n    const projects = await Project.find();\n    const employees = await Employee.find();\n\n    const projectMap = {};\n    projects.forEach((p) => (projectMap[p.name.toLowerCase()] = p));\n\n    const employeeMap = {};\n    employees.forEach((e) => (employeeMap[normalizeName(e.name)] = e._id));\n\n    const allowedPriorities = [\"High\", \"Medium\", \"Low\"];\n    const allowedStatuses = [\"Done\", \" Work In Progress\", \"done\"];\n    const allowedRequestTypes = [\"New Request\", \"Existing Request\"];\n    const allowedResolutionTypes = [\"Functional\", \"Technical\"];\n\n    const validTasks = [];\n    const invalidRows = [];\n    const createdEmployees = [];\n    const createdProjects = [];\n\n    const addToFunctionalTeam = async (projectDoc, employeeId) => {\n      if (!projectDoc) return;\n      projectDoc.teams = projectDoc.teams || {};\n      projectDoc.teams.FUNCTIONAL = projectDoc.teams.FUNCTIONAL || [];\n      const alreadyInTeam = projectDoc.teams.FUNCTIONAL.some(\n        (id) => id.toString() === employeeId.toString()\n      );\n      if (!alreadyInTeam) {\n        await Project.updateOne(\n          { _id: projectDoc._id },\n          { $addToSet: { \"teams.FUNCTIONAL\": employeeId } }\n        );\n      }\n    };\n\n    for (let i = 0; i < rows.length; i++) {\n      const task = rows[i];\n      const rowNum = task.__rowNum__;\n\n      // --- Project ---\n      let projectDoc = projectMap[cleanString(task.module_name).toLowerCase()];\n      if (!projectDoc && cleanString(task.module_name)) {\n        projectDoc = await Project.create({\n          name: cleanString(task.module_name),\n          description: \"Auto-created via bulk upload\",\n          teams: { FUNCTIONAL: [] },\n        });\n        projectMap[cleanString(task.module_name).toLowerCase()] = projectDoc;\n        createdProjects.push(projectDoc.name);\n      }\n\n      // --- Contact Person ---\n      let contactPersonId = null;\n      const contactName = cleanString(task.contact_person);\n      if (contactName) {\n        const normContact = normalizeName(contactName);\n        contactPersonId = employeeMap[normContact] || null;\n\n        if (!contactPersonId) {\n          const newEmployee = await Employee.create({\n            name: contactName,\n            department: \"FUNCTIONAL\",\n            telephone_no: \"N/A\",\n            email: `${normContact.replace(/\\s+/g, \".\")}@example.com`,\n          });\n          contactPersonId = newEmployee._id;\n          employeeMap[normContact] = newEmployee._id;\n          createdEmployees.push(contactName);\n          await addToFunctionalTeam(projectDoc, newEmployee._id);\n          if (projectDoc && !projectDoc.contact_person) {\n            projectDoc.contact_person = newEmployee._id;\n            await projectDoc.save();\n          }\n        } else {\n          await addToFunctionalTeam(projectDoc, contactPersonId);\n        }\n      }\n\n      // --- Assigned DEV / Tester ---\n      let assignedToId = null;\n      const assignedName = cleanString(task.assigned_to);\n      if (assignedName) {\n        const normAssigned = normalizeName(assignedName);\n        assignedToId = employeeMap[normAssigned] || null;\n\n        if (!assignedToId) {\n          const newEmployee = await Employee.create({\n            name: assignedName,\n            department: \"QA\",\n            telephone_no: \"N/A\",\n            email: `${normAssigned.replace(/\\s+/g, \".\")}@example.com`,\n          });\n          assignedToId = newEmployee._id;\n          employeeMap[normAssigned] = newEmployee._id;\n          createdEmployees.push(assignedName);\n          await addToFunctionalTeam(projectDoc, newEmployee._id);\n        } else {\n          await addToFunctionalTeam(projectDoc, assignedToId);\n        }\n      }\n\n      const newTask = {\n        orderIndex: i,\n        name: cleanString(task.name) || `Untitled-${rowNum}`,\n        description: cleanString(task.description),\n        project_key: projectDoc?._id || null,\n        sub_module: cleanString(task.name),\n        procedure: cleanString(task.procedure),\n        comments: cleanString(task.comments),\n        qa_status: cleanString(task.qa_status),\n        uat_status: cleanString(task.uat_status),\n        contact_person: contactPersonId || undefined,\n        assigned_to: assignedToId || null,\n        start_date: parseDate(task.start_date),\n        end_date: parseDate(task.end_date),\n        priority: safeEnum(task.priority, allowedPriorities, \"Medium\"),\n        status: safeEnum(task.status, allowedStatuses, \"NOT STARTED\"),\n        request_type: safeEnum(task.request_type, allowedRequestTypes, \"New Request\"),\n        resolution_type: safeEnum(task.resolution_type, allowedResolutionTypes, \"Functional\"),\n        done: false,\n        completed: task.status && task.status.toString().toUpperCase() === \"DONE\",\n        fromBulk: true,\n        ticketId: task.ticket_id || null, // \u2705 store ticket reference if provided\n      };\n\n      if (!projectDoc) {\n        invalidRows.push({\n          row: rowNum,\n          name: newTask.name,\n          error: `Project '${task.module_name}' not found and could not be created`,\n        });\n      }\n\n      validTasks.push(newTask);\n    }\n\n    // --- Insert / Update tasks ---\n    let insertedCount = 0;\n    let updatedCount = 0;\n    let skippedCount = 0;\n\n    const toInsert = [];\n\n    for (const task of validTasks) {\n      if (!task.project_key) continue;\n\n      const existing = await Task.findOne({\n        name: task.name,\n        project_key: task.project_key,\n        description: task.description,\n        procedure: task.procedure,\n      });\n\n      if (!existing) {\n        toInsert.push(task);\n      } else {\n        const fieldsToCompare = [\n          \"procedure\",\n          \"sub_module\",\n          \"comments\",\n          \"description\",\n          \"qa_status\",\n          \"uat_status\",\n          \"contact_person\",\n          \"assigned_to\",\n          \"start_date\",\n          \"end_date\",\n          \"priority\",\n          \"status\",\n          \"request_type\",\n          \"resolution_type\",\n          \"ticketId\", // compare ticket reference\n        ];\n\n        let changed = false;\n        for (const field of fieldsToCompare) {\n          const oldVal = existing[field] ? String(existing[field]) : \"\";\n          const newVal = task[field] ? String(task[field]) : \"\";\n          if (oldVal !== newVal) {\n            changed = true;\n            break;\n          }\n        }\n\n        if (changed) {\n          await Task.updateOne({ _id: existing._id }, { $set: task });\n          updatedCount++;\n        } else {\n          skippedCount++;\n        }\n      }\n    }\n\n    if (toInsert.length > 0) {\n      await Task.insertMany(toInsert, { ordered: true });\n      insertedCount = toInsert.length;\n    }\n\n    res.status(201).json({\n      success: true,\n      message: `${insertedCount} inserted, ${updatedCount} updated, ${skippedCount} unchanged.`,\n      inserted: insertedCount,\n      updated: updatedCount,\n      skipped: skippedCount,\n      invalidRows,\n      createdEmployees,\n      createdProjects,\n    });\n  } catch (error) {\n    console.error(\"Bulk upload error:\", error);\n    res.status(500).json({ message: \"Internal server error\", error: error.message });\n  }\n});\n\n\n\n// ------------------- UPDATE TASK -------------------\napp.put(\"/task/:id\", async (req, res) => {\n  try {\n    const { id } = req.params;\n    const update = req.body;\n\n    // Get the previous task before updating\n    const prevTask = await Task.findOne({\n      $or: [{ _id: id }, { task_key: id }],\n    }).lean();\n    if (!prevTask) {\n      return res\n        .status(404)\n        .json({ success: false, message: \"Task not found\" });\n    }\n\n    // Update task\n    const updatedTask = await Task.findOneAndUpdate(\n      { $or: [{ _id: id }, { task_key: id }] },\n      update,\n      { new: true, runValidators: true }\n    ).lean();\n\n    //  Sync ticket linkage if ticket changed\n    if (update.ticket && update.ticket !== prevTask.ticket?.toString()) {\n      if (prevTask.ticket) {\n        await Ticket.findByIdAndUpdate(prevTask.ticket, {\n          $pull: { tasks: prevTask._id },\n        });\n      }\n      await Ticket.findByIdAndUpdate(update.ticket, {\n        $addToSet: { tasks: updatedTask._id },\n      });\n    }\n\n    // Email notify new contact person \n    if (updatedTask.contact_person) {\n      const employee = await Employee.findById(updatedTask.contact_person);\n      if (employee?.email) {\n        sendTaskEmail(employee.email, {\n          action: \"updated\",\n          previous: {\n            name: prevTask.name || \"N/A\",\n          },\n          updated: {\n            name: updatedTask.name || \"N/A\",\n          },\n        });\n      }\n    }\n\n    res.json({ success: true, task: updatedTask });\n  } catch (err) {\n    res.status(500).json({\n      success: false,\n      message: \"Internal server error\",\n      error: err.message,\n    });\n  }\n});\n\n\n// ------------------- DELETE TASK -------------------\napp.delete(\"/task/:id\", async (req, res) => {\n  try {\n    const deletedTask = await Task.findByIdAndDelete(req.params.id);\n    if (!deletedTask)\n      return res\n        .status(404)\n        .json({ success: false, message: \"Task not found\" });\n\n    // \uD83D\uDD17 Remove from ticket\n    if (deletedTask.ticket) {\n      await Ticket.findByIdAndUpdate(deletedTask.ticket, {\n        $pull: { tasks: deletedTask._id },\n      });\n    }\n\n    res.json({ success: true, message: \"Task deleted successfully\" });\n  } catch (err) {\n    res\n      .status(500)\n      .json({ success: false, message: \"Internal server error\" });\n  }\n});\n\n// ------------------- GET TASKS BY TICKET -------------------\napp.get(\"/tasks/by-ticket/:ticketId\", async (req, res) => {\n  try {\n    const tasks = await Task.find({ ticket: req.params.ticketId })\n      .populate(\"assigned_to contact_person\", \"name email\")\n      .lean();\n\n    res.json({ success: true, tasks });\n  } catch (err) {\n    res\n      .status(500)\n      .json({ success: false, message: \"Internal server error\", error: err.message });\n  }\n});\n// ------------------- COUNT TASKS -------------------\n/*app.get(\"/task/count\", async (req, res) => {\n  try {\n    const count = await Task.countDocuments();\n    res.json({ success: true, count });\n  } catch (error) {\n    res.status(500).json({ success: false, message: \"Internal server error\", error: error.message });\n  }\n});*/\n\n\n/* ===========================\n      DEPARTMENT APIS\n   =========================== */\n// Create department\napp.post('/department', async (req, res) => {\n  const { name } = req.body;\n  if (!name) {\n    return res.status(400).json({ success: false, message: 'Department name is required' });\n  }\n  try {\n    const department = new Department({ name });\n    await department.save();\n    res.status(201).json({ success: true, message: 'Department created successfully', department });\n  } catch (err) {\n    res.status(500).json({ success: false, message: 'Error creating department', error: err.message });\n  }\n});\n\n// Get all departments\napp.get('/department', async (req, res) => {\n  try {\n    const departments = await Department.find();\n\n    const departmentsWithEmployees = await Promise.all(\n      departments.map(async (dep) => {\n        const employees = await Employee.find({ departmentId: dep._id });\n        return {\n          ...dep.toObject(),\n          employees,\n        };\n      })\n    );\n\n    res.json({ success: true, departments: departmentsWithEmployees });\n  } catch (err) {\n    res.status(500).json({ success: false, message: 'Error fetching departments', error: err.message });\n  }\n});\n\n\n// Update department\napp.put(\"/department/:id\", async (req, res) => {\n  const { id } = req.params;\n  const { name } = req.body;\n\n  if (!name) {\n    return res.status(400).json({ success: false, message: \"Name is required\" });\n  }\n\n  try {\n    const updated = await Department.findByIdAndUpdate(\n      id,\n      { name },\n      { new: true }\n    );\n\n    if (!updated) {\n      return res.status(404).json({ success: false, message: \"Department not found\" });\n    }\n\n    res.json({ success: true, department: updated });\n  } catch (err) {\n    console.error(\"Error updating department:\", err);\n    res.status(500).json({ success: false, message: \"Failed to update department\" });\n  }\n});\n\n\n// Delete department\napp.delete('/department/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const deleted = await Department.findByIdAndDelete(id);\n    if (!deleted) {\n      return res.status(404).json({ success: false, message: 'Department not found' });\n    }\n    res.json({ success: true, message: 'Department deleted successfully' });\n  } catch (err) {\n    res.status(500).json({ success: false, message: 'Error deleting department', error: err.message });\n  }\n});\napp.get(\"/departments-with-employees\", async (req, res) => {\n  try {\n    const departments = await Department.find().lean();\n    const employees = await Employee.find();\n\n    const withEmployees = departments.map(dep => ({\n      ...dep,\n      employees: employees.filter(emp => String(emp.departmentId) === String(dep._id))\n    }));\n\n    res.json({ success: true, departments: withEmployees });\n  } catch (err) {\n    res.status(500).json({ success: false, message: \"Error fetching data\" });\n  }\n});\n\n\n\n\n/* ===========================\n     PROJECT ROUTES\n  =========================== */\n\n// Route to add a new project\n/*app.post('/projects', (req, res) => {\n  const { name, description, contact_person } = req.body;\n  const sql = \"INSERT INTO projects (name, description, contact_person) VALUES (?, ?, ?)\";\n  app.post(sql, [name, description, contact_person], (err, result) => {\n    if (err) {\n      return res.status(500).json({ success: false, message: 'Failed to add project' });\n    }\n    res.json({ success: true, message: 'Project added successfully' });\n  });\n});*/\n// server.js or routes/projects.js\n// Create a new project\napp.post('/projects', async (req, res) => {\n  try {\n    const { name, description, contact_person } = req.body;\n\n    if (!name || !description || !contact_person) {\n      return res.status(400).json({ success: false, message: \"All fields are required\" });\n    }\n\n    const newProject = new Project({\n      name,\n      description,\n      contact_person // employee _id\n      \n    });\n\n    await newProject.save();\n\n    // populate before sending response\n    const populatedProject = await Project.findById(newProject._id)\n      .populate(\"contact_person\", \"name email\");\n\n    res.status(201).json({ success: true, project: populatedProject });\n  } catch (err) {\n    console.error(\"Error creating project:\", err);\n    res.status(500).json({ success: false, message: \"Failed to create project\" });\n  }\n});\n\n\n// Fetch all projects with employee populated\napp.get('/projects', async (req, res) => {\n  try {\n    const projects = await Project.find()\n      .populate('contact_person', 'name email') // populate only name and email fields\n      .exec(); // always good to use exec() for proper error handling\n    res.json({ success: true, projects });\n  } catch (err) {\n    console.error(\"Error fetching projects:\", err);\n    res.status(500).json({ success: false, message: \"Failed to fetch projects\" });\n  }\n});\n\n\n\n\n\n/** -------------------------------\n *  Fetch all employees\n * ------------------------------- */\napp.get(\"/employee\", async (req, res) => {\n  try {\n    const employees = await Employee.find()\n      .populate(\"departmentId\", \"name\") // populate only the 'name' field of the department\n      .exec();\n    res.json({ success: true, employees });\n  } catch (err) {\n    console.error(\"Error fetching employees:\", err);\n    res.status(500).json({ success: false, message: \"Failed to fetch employees\" });\n  }\n});\n\n\n/** -------------------------------\n *  Update project\n * ------------------------------- */\napp.post(\"/projects/:projectId\", async (req, res) => {\n  const { projectId } = req.params;\n  const { name, description, contact_person } = req.body;\n\n  if (!name || !description || !contact_person) {\n    return res.status(400).json({ error: \"Please provide all required fields\" });\n  }\n\n  try {\n    const project = await Project.findByIdAndUpdate(\n      projectId, // \u2705 use _id\n      { name, description, contact_person },\n      { new: true }\n    ).populate(\"contact_person\", \"name email\");\n\n    if (!project) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n\n    res.json({ message: \"Project updated successfully\", project });\n  } catch (err) {\n    console.error(\"Error updating project:\", err);\n    res.status(500).json({ error: \"Failed to update project\" });\n  }\n});\n\n// Get all tasks for a specific project\n// GET tasks for a project\n\napp.get(\"/projects/:projectId/tasks\", async (req, res) => {\n  const { projectId } = req.params;\n\n  try {\n    const tasks = await Task.find({ project_key: projectId })\n      .populate(\"assigned_to\", \"name email\"); // only include name & email\n    res.json({ tasks });\n  } catch (err) {\n    console.error(\"Error fetching project tasks:\", err);\n    res.status(500).json({ error: \"Failed to fetch tasks for project\" });\n  }\n});\n\n\n\n\n\n/** -------------------------------\n *  Delete project\n * ------------------------------- */\n/*app.delete(\"/projects/:projectKey\", async (req, res) => {\n  const { projectKey } = req.params;\n  try {\n    const result = await Project.findOneAndDelete({ project_key: projectKey });\n    if (!result) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n    res.json({ message: \"Project deleted successfully\" });\n  } catch (err) {\n    console.error(\"Error deleting project:\", err);\n    res.status(500).json({ error: \"Failed to delete project\" });\n  }\n});*/\napp.delete('/projects/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    console.log(\"Delete request received for project ID:\", id);\n\n    const deletedProject = await Project.findByIdAndDelete(id);\n    console.log(\"Deleted project:\", deletedProject);\n\n    if (!deletedProject) {\n      return res.status(404).json({ success: false, message: 'Project not found' });\n    }\n\n    await Task.deleteMany({ project_key: id });\n    res.json({ success: true, message: 'Project and related tasks deleted successfully' });\n  } catch (err) {\n    console.error('Error deleting project:', err);\n    res.status(500).json({ success: false, message: 'Internal server error' });\n  }\n});\n\n// DELETE Project and related Tasks\n\nconst handleDeleteProject = async (projectId) => {\n  console.log(\"\uD83D\uDD0D Trying to delete project:\", projectId);   // log the id\n  console.log(\"Delete URL:\", `${BASE_URL}/projects/${projectId}`);\n\n  if (!window.confirm(\"Are you sure you want to delete this project and all its tasks?\")) return;\n\n  setLoading(true);\n  setErrorMessage(\"\");\n  setSuccessMessage(\"\");\n\n  try {\n    await axios.delete(`${BASE_URL}/projects/${projectId}`);\n\n    setSuccessMessage(\"Project and its tasks deleted successfully!\");\n    if (selectedProject && (selectedProject._id === projectId || selectedProject.id === projectId)) {\n      setSelectedProject(null);\n      setTasks([]);\n    }\n    await fetchProjects();\n  } catch (err) {\n    console.error(\"\u274C Error deleting project:\", err.response?.data || err.message || err);\n    setErrorMessage(\"Error deleting project: \" + (err.response?.data?.message || err.message));\n  } finally {\n    setLoading(false);\n  }\n};\n\n\n\n\n//FLUTTER APIS\n\n//Fetch employee\n\n\n// \u2705 GET all employees\n\n// \u2705 GET all employees\napp.get('/employee', async (req, res) => {\n  try {\n    const employees = await Employee.find()\n      .populate('departmentId', 'name') // populate only the name\n      .exec();\n\n    res.json({ success: true, employees });\n  } catch (err) {\n    console.error('Error fetching employees:', err);\n    res.status(500).json({ success: false, message: 'Failed to fetch employees' });\n  }\n});\n\n// \u2705 POST new employee\n// GET all employees\napp.get('/employee', async (req, res) => {\n  try {\n    // Populate department name\n    const employees = await Employee.find()\n      .populate('departmentId', 'name') // only get 'name' field from Department\n      .exec();\n\n    res.json({ success: true, employees });\n  } catch (error) {\n    console.error('\u274C Error fetching employees:', error);\n    res.status(500).json({ success: false, message: 'Error fetching employees' });\n  }\n});\n\n// POST new employee\napp.post('/employee', async (req, res) => {\n  const { name, email, departmentId, telephone_no } = req.body;\n\n  if (!name || !email || !departmentId || !telephone_no) {\n    return res.status(400).json({ success: false, message: 'All fields are required' });\n  }\n\n  try {\n    const exists = await Employee.findOne({ email });\n    if (exists) {\n      return res.status(409).json({ success: false, message: 'Email already exists' });\n    }\n\n    const newEmployee = new Employee({ name, email, departmentId, telephone_no });\n    await newEmployee.save();\n\n    const populatedEmployee = await newEmployee.populate('departmentId', 'name');\n\n    res.status(201).json({\n      success: true,\n      message: 'Employee saved successfully',\n      employee: populatedEmployee\n    });\n  } catch (error) {\n    console.error('\u274C Error saving employee:', error);\n    res.status(500).json({ success: false, message: 'Error saving employee' });\n  }\n});\n\n// PUT update employee\napp.put('/employee/:id', async (req, res) => {\n  const { id } = req.params;\n  const { name, email, departmentId, telephone_no } = req.body;\n\n  try {\n    const updated = await Employee.findByIdAndUpdate(\n      id,\n      { name, email, departmentId, telephone_no },\n      { new: true, runValidators: true }\n    ).populate('departmentId', 'name');\n\n    if (!updated) {\n      return res.status(404).json({ success: false, message: 'Employee not found' });\n    }\n\n    res.json({ success: true, message: 'Employee updated successfully', employee: updated });\n  } catch (error) {\n    console.error('\u274C Error updating employee:', error);\n    res.status(500).json({ success: false, message: 'Error updating employee' });\n  }\n});\n// PUT - update a project by ID\napp.put('/projects/:id', async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { name, description, contact_person } = req.body;\n\n    if (!name || !description || !contact_person) {\n      return res.status(400).json({ success: false, message: 'All fields are required' });\n    }\n\n    const updatedProject = await Project.findByIdAndUpdate(\n      id,\n      { name, description, contact_person },\n      { new: true, runValidators: true }\n    );\n\n    if (!updatedProject) {\n      return res.status(404).json({ success: false, message: 'Project not found' });\n    }\n\n    res.json({ success: true, project: updatedProject });\n  } catch (err) {\n    console.error('Error updating project:', err);\n    res.status(500).json({ success: false, message: 'Internal server error' });\n  }\n});\n\n// DELETE employee\napp.delete('/employee/:id', async (req, res) => {\n  const { id } = req.params;\n\n  try {\n    const result = await Employee.findByIdAndDelete(id);\n\n    if (!result) return res.status(404).json({ success: false, message: 'Employee not found' });\n\n    res.json({ success: true, message: 'Employee deleted successfully' });\n  } catch (error) {\n    console.error('\u274C Error deleting employee:', error);\n    res.status(500).json({ success: false, message: 'Error deleting employee' });\n  }\n});\n\n\n/* ===========================\n    DASHBOARD ROUTES\n=========================== */\n\napp.get('/task/pie', (req, res) => {\n  app.post('SELECT * FROM task', (err, results) => {\n    if (err) {\n      return res.status(500).json({ message: 'Internal server error', error: err.message });\n    }\n    res.status(200).json({ tasks: results });\n\n  });\n});\n\napp.get('/employee/bar', (req, res) => {\n  app.post('SELECT department, COUNT(*) as employeeCount FROM employee GROUP BY department', (err, results) => {\n    if (err) {\n      return res.status(500).json({ message: 'Internal server error', error: err.message });\n    }\n    res.status(200).json({ employee: results });\n\n\n  })\n});\n\napp.get('/task/bar', (req, res) => {\n  app.post(\n    `SELECT p.name, COUNT(*) AS taskCount \n       FROM task t\n       JOIN projects p ON t.project_key = p.project_key\n       GROUP BY t.project_key`,\n    (err, results) => {\n      if (err) {\n        return res.status(500).json({ message: 'Internal server error', error: err.message });\n      }\n      res.status(200).json({ tasks: results });\n\n    }\n  );\n});\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\nmodule.exports = mongoose\n/* ===========================\n   STARTING SERVER\n=========================== */\n\n"],
  "mappings": "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",
  "names": ["exports", "module", "mongoose", "bcrypt", "User", "exports", "module", "mongoose", "uuidv4", "exports", "module", "mongoose", "exports", "module", "mongoose", "exports", "module", "mongoose", "exports", "module", "mongoose", "exports", "module", "nodemailer", "sendTaskEmail"]
}
